generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Karyawan {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customId        String     @unique
  name            String
  nip             String?    @unique
  nik             String?    @unique
  npwp            String?    @unique
  emailPribadi    String?
  phone           String?
  address         String?
  birthDate       String?
  tempatLahir     String?
  jenisKelamin    String?
  agama           String?
  joinDate        String
  position        String
  department      String
  pendidikan      String?
  golongan        String?
  image           String?
  kontakDarurat   String?
  hubunganDarurat String?
  status          UserStatus
  lastLogin       DateTime?
  user            User?

  @@map("karyawan")
}

model User {
  id           String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customId     String              @unique
  username     String              @unique
  email        String              @unique
  role         Role
  status         UserStatus       @default(AKTIF)
  passwordHash String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  kantorId     String?             @db.Uuid
  izinLokasi   AbsensiIzinLokasi[]
  attendances  Attendance[]
  barcodes     Barcode[]
  karyawan     Karyawan            @relation(fields: [customId], references: [customId])
  kantor       Kantor?             @relation("KantorUsers", fields: [kantorId], references: [id])

  kantorTetap  Boolean     @default(false)

  @@map("users")
}

model Attendance {
  id_at        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String
  kantorId     String?          @db.Uuid
  lokasiId     String?          @db.Uuid
  date         DateTime
  clockIn      String?
  clockOut     String?
  status       AttendanceStatus
  photoIn      String?
  photoOut     String?
  latitude     Float?
  longitude    Float?
  location     String?
  barcodeIn    String?
  barcodeOut   String?
  barcodeInAt  DateTime?
  barcodeOutAt DateTime?
  createdAt    DateTime         @default(now())
  user         User             @relation(fields: [userId], references: [customId])
  kantor       Kantor?          @relation(fields: [kantorId], references: [id])
  lokasiDinas  LokasiDinas?     @relation(fields: [lokasiId], references: [id])
}

model Barcode {
  id        String   @id @default(uuid()) @db.Uuid
  code      String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [customId])
}

model AlatKalibrasi {
  id                 String   @id @default(uuid()) @db.Uuid
  nama_alat          String
  wilayahKerja       wilayahKerja[]
}

model SparePart {
  id        String   @id @default(uuid()) @db.Uuid
  nama      String
  kode      String   @unique
  jumlah    Int
  lokasi    String
  supplier  String?
  foto      String?
  status    String
  createdAt DateTime @default(now())
}

model LokasiDinas {
  id        String              @id @default(uuid()) @db.Uuid
  name      String
  latitude  Float
  longitude Float
  Lokasi    String
  SK String
  satuanKerja   SatuanKerja?   @relation(fields: [SK], references: [kodeSK])
  radius    Int                 @default(100)
  izinList  AbsensiIzinLokasi[]
  attendances  Attendance[]
  wilayahKerja wilayahKerja[]
}


model AbsensiIzinLokasi {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String
  lokasiId  String      @db.Uuid
  kantorId  String?     @db.Uuid
  tanggalMulai   DateTime
  tanggalSelesai DateTime
  keperluan String?
  createdAt DateTime    @default(now())
  kantor    Kantor?     @relation(fields: [kantorId], references: [id])
  lokasi    LokasiDinas? @relation(fields: [lokasiId], references: [id])
  user      User        @relation(fields: [userId], references: [customId])
}

model Kantor {
  id          String              @id @default(uuid()) @db.Uuid
  kodeKantor  String              @unique
  nama        String
  alamat      String?
  latitude    Float
  longitude   Float
  radiusMeter Float
  createdAt   DateTime            @default(now())
  izinLokasi  AbsensiIzinLokasi[]
  attendances  Attendance[]
  users       User[]              @relation("KantorUsers")
}

model SatuanKerja {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kodeSK      String              @unique
  NamaSK      String 
  Lokasi      LokasiDinas[]
}

model wilayahKerja {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  unit        Int
  id_LK      String       @db.Uuid
  id_AK        String     @db.Uuid

  alatKalibrasi AlatKalibrasi @relation(fields: [id_AK], references: [id])
  lokasiDinas   LokasiDinas   @relation(fields: [id_LK], references: [id])
}

enum Role {
  ADMIN
  OWNER
  DIREKTUR
  MANAJER
  KARYAWAN
  TEKNISI
  KEUANGAN
  KEPALA_GUDANG
}

enum UserStatus {
  AKTIF
  NONAKTIF
  DITANGGUHKAN
}

enum AttendanceStatus {
  TEPAT_WAKTU
  TERLAMBAT
  TIDAK_HADIR
}
